name: Debug Workflow

on:
  workflow_dispatch:
    inputs:
      test_number:
        description: "Phone number to test (e.g., 081234567890)"
        required: true
        default: "081234567890"
      headless:
        description: "Run in headless mode"
        required: true
        default: true
        type: boolean

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libnspr4 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libpulse0 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libwayland-server0 \
            libx11-xcb1 \
            libxcb-dri3-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxcb-util1 \
            libxcb-xfixes0 \
            libxcb-xinerama0 \
            libxcb-xkb1 \
            libxkbcommon-x11-0 \
            xvfb

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests
          playwright install chromium firefox --with-deps

      - name: Verify Playwright installation
        run: |
          python -c "
          from playwright.sync_api import sync_playwright
          with sync_playwright() as p:
              browser = p.chromium.launch()
              browser.close()
          print('âœ… Playwright verification successful')
          "

      - name: Create debug configuration
        run: |
          echo "DEBUG=true" >> .env
          echo "TEST_NUMBER=${{ github.event.inputs.test_number }}" >> .env
          echo "HEADLESS=${{ github.event.inputs.headless }}" >> .env

      - name: Modify debug script for CI
        run: |
          cat > scripts/checker_debug_ci.py << 'EOF'
          import asyncio
          from playwright.async_api import async_playwright

          async def scrape_basic_info():
              """Scrape title dan description dari halaman web"""
              try:
                  async with async_playwright() as p:
                      # Launch browser dengan konfigurasi anti-detection
                      browser = await p.chromium.launch(
                          headless=False,  # Non-headless mode
                          args=[
                              '--disable-blink-features=AutomationControlled',
                              '--disable-features=IsolateOrigins,site-per-process',
                              '--disable-site-isolation-trials',
                              '--start-maximized',  # Maximize window in non-headless mode
                              '--no-sandbox',
                              '--disable-setuid-sandbox',
                              '--disable-dev-shm-usage'
                          ]
                      )
                      
                      # Buat context dengan user agent desktop
                      context = await browser.new_context(
                          user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
                          viewport={'width': 1920, 'height': 1080},
                          java_script_enabled=True,
                      )
                      
                      # Buat page baru
                      page = await context.new_page()
                      
                      # Set extra headers
                      await page.set_extra_http_headers({
                          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                          'Accept-Language': 'en-US,en;q=0.9',
                          'Accept-Encoding': 'gzip, deflate, br',
                          'Connection': 'keep-alive',
                          'Upgrade-Insecure-Requests': '1',
                          'Sec-Fetch-Dest': 'document',
                          'Sec-Fetch-Mode': 'navigate',
                          'Sec-Fetch-Site': 'none',
                          'Sec-Fetch-User': '?1',
                          'sec-ch-ua': '"Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                          'sec-ch-ua-mobile': '?0',
                          'sec-ch-ua-platform': '"Windows"'
                      })
                      
                      print("Membuka halaman...")
                      try:
                          # Navigate dengan timeout normal karena non-headless
                          print("Mencoba mengakses halaman...")
                          await page.goto("https://ceebydith.com/cek-hlr-lokasi-hp.html", 
                                        wait_until="domcontentloaded",
                                        timeout=60000)
                      except Exception as e:
                          print(f"Initial navigation error: {str(e)}")
                          print("Mencoba recovery mode...")
                          # Try alternative approach
                          await page.goto("https://ceebydith.com/cek-hlr-lokasi-hp.html", 
                                        wait_until="commit",
                                        timeout=30000)
                      
                      # Tunggu sampai challenge selesai
                      print("Menunggu halaman selesai loading...")
                      try:
                          print("Menunggu networkidle state...")
                          await page.wait_for_load_state("networkidle", timeout=30000)
                      except Exception as e:
                          print(f"Network idle timeout: {str(e)}")
                          
                      print("Menunggu tambahan 10 detik...")
                      await page.wait_for_timeout(10000)  # Increased wait time
                      
                      # Get page title
                      title = await page.title()
                      print(f"Title: {title}")
                      
                      if "Just a moment" in title:
                          print("Terdeteksi Cloudflare challenge, menunggu...")
                          await page.wait_for_timeout(10000)  # Tunggu 10 detik lagi
                          title = await page.title()
                          print(f"Title setelah menunggu: {title}")
                      
                      # Get meta description
                      description = await page.evaluate("""() => {
                          const meta = document.querySelector('meta[name="description"]');
                          return meta ? meta.getAttribute('content') : '';
                      }""")
                      print(f"Description: {description}")
                      
                      # Save halaman untuk debug
                      content = await page.content()
                      print(f"\nPage content length: {len(content)} bytes")
                      print("Saving page content to debug.html...")
                      with open("debug.html", "w", encoding="utf-8") as f:
                          f.write(content)
                      
                      await context.close()
                      await browser.close()
              except Exception as e:
                  print(f"Error: {str(e)}")
                  raise e
              
          if __name__ == "__main__":
              asyncio.run(scrape_basic_info())
          EOF

      - name: Run debug test
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" python scripts/checker_debug_ci.py

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            debug_*.png
            debug_*.txt
          retention-days: 7
